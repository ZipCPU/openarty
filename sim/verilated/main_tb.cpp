////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./main_tb.cpp
// {{{
// Project:	OpenArty, an entirely open SoC based upon the Arty platform
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga -d -o . allclocks.txt global.txt icape.txt version.txt buserr.txt pic.txt pwrcount.txt spio.txt clrspio.txt rtcgps.txt rtcdate.txt wbuconsole.txt bkram.txt spansion.txt sdram.txt zipmaster.txt mdio.txt enet.txt gps.txt sdspi.txt mem_full.txt mem_bkram_only.txt mem_sdram_bkram.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2017-2024, Gisselquist Technology, LLC
// {{{
// This file is part of the OpenArty project.
//
// The OpenArty project is free software and gateware, licensed under the
// terms of the 3rd version of the GNU General Public License as published by
// the Free Software Foundation.
//
// This project is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
//
// SIM.INCLUDE
//
// Any SIM.INCLUDE tags you define will be pasted here.
// This is useful for guaranteeing any include functions
// your simulation needs are called.
//
#include "verilated.h"
#include "Vmain.h"
#define	BASECLASS	Vmain

#include "design.h"
#include "regdefs.h"
#include "testb.h"
#include "sdspisim.h"
#include "flashsim.h"
#include "zipelf.h"

#include "dbluartsim.h"
#include "memsim.h"
#include "uartsim.h"
#include "byteswap.h"
#include "enetctrlsim.h"
//
// SIM.DEFINES
//
// This tag is useful fr pasting in any #define values that
// might then control the simulation following.
//
////////////////////////////////////////////////////////////////////////////////
//
// ZipCPU simulation defines
// {{{
#ifndef	VVAR
#ifdef	ROOT_VERILATOR

#include "Vmain___024root.h"
#define	VVAR(A)	rootp->main__DOT_ ## A

#elif	defined(NEW_VERILATOR)
#define	VVAR(A)	main__DOT_ ## A
#else
#define	VVAR(A)	v__DOT_ ## A
#endif
#endif

#define	OPT_PIPELINED
#define	CPUVAR(A)	VVAR(_swic__DOT__thecpu__DOT__core__DOT_ ## A)

#define	cpu_break 	VVAR(_swic__DOT__cpu_break)
// }}}
#ifndef VVAR
#ifdef  ROOT_VERILATOR
#include "Vmain___024root.h"

#define VVAR(A) rootp->main__DOT_ ## A
#elif	defined(NEW_VERILATOR)
#define VVAR(A) main__DOT_ ## A
#else
#define VVAR(A) v__DOT_ ## A
#endif
#endif

#define	block_ram	VVAR(_bkrami__DOT__mem)
class	MAINTB : public TESTB<Vmain> {
public:
		// SIM.DEFNS
		//
		// If you have any simulation components, create a
		// SIM.DEFNS tag to have those components defined here
		// as part of the main_tb.cpp function.
#ifdef	SDSPI_ACCESS
	SDSPISIM	m_sdcard;
#endif // SDSPI_ACCESS
#ifdef	FLASH_ACCESS
	FLASHSIM	*m_flash;
#endif // FLASH_ACCESS
	int	m_cpu_bombed;
	DBLUARTSIM	*m_wbu;
#ifdef	SDRAM_ACCESS
	MEMSIM	*m_sdram;
#endif	// SDRAM_ACCESS
#ifdef	GPSUART_ACCESS
	UARTSIM	*m_gpsu;
#endif // GPSUART_ACCESS
#ifdef	NETCTRL_ACCESS
	ENETCTRLSIM	*m_mdio;
#endif // NETCTRL_ACCESS
	MAINTB(void) {
		// SIM.INIT
		//
		// If your simulation components need to be initialized,
		// create a SIM.INIT tag.  That tag's value will be pasted
		// here.
		//
		// From sdcard
#ifdef	SDSPI_ACCESS
		m_sdcard.debug(false);
#endif	// SDSPI_ACCESS
		// From flash
#ifdef	FLASH_ACCESS
		m_flash = new FLASHSIM(FLASHLGLEN, false, 3, 6);
#endif // FLASH_ACCESS
		// From zip
		m_cpu_bombed = 0;
		// From wbu
		m_wbu = new DBLUARTSIM();
		m_wbu->setup(82);
		// From sdram
#ifdef	SDRAM_ACCESS
		m_sdram = new MEMSIM(0x10000000);
#endif	// SDRAM_ACCESS
		// From gpsu
#ifdef	GPSUART_ACCESS
		m_gpsu = new UARTSIM(FPGAPORT+2);
		m_gpsu->setup(0x00002191);
#endif // GPSUART_ACCESS
		// From mdio
#ifdef	NETCTRL_ACCESS
		m_mdio = new ENETCTRLSIM;
#endif // NETCTRL_ACCESS
	}

	void	reset(void) {
		// SIM.SETRESET
		// If your simulation component needs logic before the
		// tick with reset set, that logic can be placed into
		// the SIM.SETRESET tag and thus pasted here.
		//
		m_core->i_cpu_reset = 1;
		TESTB<Vmain>::reset();
		// SIM.CLRRESET
		// If your simulation component needs logic following the
		// reset tick, that logic can be placed into the
		// SIM.CLRRESET tag and thus pasted here.
		//
		m_core->i_cpu_reset = 0;
	}

	void	trace(const char *vcd_trace_file_name) {
		fprintf(stderr, "Opening TRACE(%s)\n",
				vcd_trace_file_name);
		opentrace(vcd_trace_file_name);
		m_time_ps = 0;
	}

	void	close(void) {
		m_done = true;
	}

	void	tick(void) {
		TESTB<Vmain>::tick(); // Clock.size = 4
	}


	// Evaluating clock clk

	// sim_clk_tick() will be called from TESTB<Vmain>::tick()
	//   following any falling edge of clock clk
	virtual	void	sim_clk_tick(void) {
		// Default clock tick
		//
		// SIM.TICK tags go here for SIM.CLOCK=clk
		//
		// SIM.TICK from sdcard
		// SD Card simulation
		// {{{
#ifdef	SDSPI_ACCESS
		m_core->i_sdcard_data = m_sdcard(
				(m_core->o_sdcard_data&8)?1:0,
				m_core->o_sdcard_sck,
				m_core->o_sdcard_cmd);
		m_core->i_sdcard_data &= 1;
		m_core->i_sdcard_data |= (m_core->o_sdcard_data&0x0e);
		m_core->i_sdcard_detect = 1;
#endif	// SDSPI_ACCESS
		// }}}
		// SIM.TICK from flash
#ifdef	FLASH_ACCESS
		m_core->i_qspi_dat = m_flash->simtick(
			m_core->o_qspi_cs_n,
			m_core->o_qspi_sck,
			m_core->o_qspi_dat,
			m_core->o_qspi_mod);
#endif // FLASH_ACCESS
		// SIM.TICK from zip
#ifdef	INCLUDE_ZIPCPU
		// ZipCPU Sim instruction support
		// {{{
		if (m_cpu_bombed) {
			if (m_cpu_bombed++ > 12)
				m_done = true;
		} else if (m_core->cpu_break) {
			printf("\n\nBOMB : CPU BREAK RECEIVED\n");
			m_cpu_bombed++;
		}
		// }}}
#endif	// INCLUDE_ZIPCPU

		// SIM.TICK from wbu
		m_core->i_wbu_uart_rx = (*m_wbu)(m_core->o_wbu_uart_tx);
		// SIM.TICK from sdram
#ifdef	SDRAM_ACCESS
		// Simulate the SDRAM
		(*m_sdram)(m_core->o_sdram_cyc,
			m_core->o_sdram_stb,
			m_core->o_sdram_we,
			m_core->o_sdram_addr,
			&m_core->o_sdram_data,
			m_core->o_sdram_sel,
			m_core->i_sdram_stall,
			m_core->i_sdram_ack,
			&m_core->i_sdram_data);
		m_core->i_sdram_err = 0;
#endif	// SDRAM_ACCESS
		// SIM.TICK from mdio
#ifdef	NETCTRL_ACCESS
		m_core->i_mdio = (*m_mdio)(0, m_core->o_mdclk,
				((m_core->o_mdwe)&&(!m_core->o_mdio))?0:1);
#else
		m_core->i_mdio = ((m_core->o_mdwe)&&(!m_core->o_mdio))?0:1;
#endif // NETCTRL_ACCESS
	}

	// Evaluating clock crystal_clk

	// sim_crystal_clk_tick() will be called from TESTB<Vmain>::tick()
	//   following any falling edge of clock crystal_clk
	virtual	void	sim_crystal_clk_tick(void) {
		//
		// SIM.TICK tags go here for SIM.CLOCK=crystal_clk
		//
		// No SIM.TICK tags defined
		m_changed = false;
	}

	// Evaluating clock eth_tx_clk

	// sim_eth_tx_clk_tick() will be called from TESTB<Vmain>::tick()
	//   following any falling edge of clock eth_tx_clk
	virtual	void	sim_eth_tx_clk_tick(void) {
		//
		// SIM.TICK tags go here for SIM.CLOCK=eth_tx_clk
		//
		// No SIM.TICK tags defined
		m_changed = false;
	}

	// Evaluating clock eth_rx_clk

	// sim_eth_rx_clk_tick() will be called from TESTB<Vmain>::tick()
	//   following any falling edge of clock eth_rx_clk
	virtual	void	sim_eth_rx_clk_tick(void) {
		//
		// SIM.TICK tags go here for SIM.CLOCK=eth_rx_clk
		//
		// SIM.TICK from netp
		m_core->i_eth_col   = 0;
		m_core->i_eth_rxerr = 0;
		m_core->i_eth_crs   = 0;
		if (!m_core->o_eth_rstn) {
			// Reset logic
			m_core->i_eth_rx_dv= 0;
			m_core->i_eth_rxd  = 0;
		} else {
			m_core->i_eth_rx_dv= m_core->o_eth_tx_en;
			m_core->i_eth_rxd  = m_core->o_eth_txd;
		}

	}
	//
	// Step until clock clk ticks
	//
	virtual	void	tick_clk(void) {
		// Advance until the default clock ticks
		do {
			tick();
		} while(!m_clk.rising_edge());
	}

	//
	// Step until clock crystal_clk ticks
	//
	virtual	void	tick_crystal_clk(void) {
		do {
			tick();
		} while(!m_crystal_clk.rising_edge());
	}

	//
	// Step until clock eth_tx_clk ticks
	//
	virtual	void	tick_eth_tx_clk(void) {
		do {
			tick();
		} while(!m_eth_tx_clk.rising_edge());
	}

	//
	// Step until clock eth_rx_clk ticks
	//
	virtual	void	tick_eth_rx_clk(void) {
		do {
			tick();
		} while(!m_eth_rx_clk.rising_edge());
	}

	//
	// The load function
	//
	// This function is required by designs that need the flash or memory
	// set prior to run time.  The test harness should be able to call
	// this function to load values into any (memory-type) location
	// on the bus.
	//
	bool	load(uint32_t addr, const char *buf, uint32_t len) {
		uint32_t	start, offset, wlen, base, adrln;

		//
		// Loading the flash component
		//
		base  = 0x0a000000; // in octets
		adrln = 0x01000000;

		if ((addr >= base)&&(addr < base + adrln)) {
			// If the start access is in flash
			start = (addr > base) ? (addr-base) : 0;
			offset = (start + base) - addr;
			wlen = (len-offset > adrln - start)
				? (adrln - start) : len - offset;
#ifdef	FLASH_ACCESS
			// FROM flash.SIM.LOAD
			m_flash->load(start, &buf[offset], wlen);
			// AUTOFPGA::Now clean up anything else
			// Was there more to write than we wrote?
			if (addr + len > base + adrln)
				return load(base + adrln, &buf[offset+wlen], len-wlen);
			return true;
#else	// FLASH_ACCESS
			return false;
#endif	// FLASH_ACCESS
		//
		// End of components with a SIM.LOAD tag, and a
		// non-zero number of addresses (NADDR)
		//
		}

		//
		// Loading the sdram component
		//
		base  = 0x10000000; // in octets
		adrln = 0x10000000;

		if ((addr >= base)&&(addr < base + adrln)) {
			// If the start access is in sdram
			start = (addr > base) ? (addr-base) : 0;
			offset = (start + base) - addr;
			wlen = (len-offset > adrln - start)
				? (adrln - start) : len - offset;
#ifdef	SDRAM_ACCESS
			// FROM sdram.SIM.LOAD
			m_sdram->load(start, &buf[offset], wlen);

			// AUTOFPGA::Now clean up anything else
			// Was there more to write than we wrote?
			if (addr + len > base + adrln)
				return load(base + adrln, &buf[offset+wlen], len-wlen);
			return true;
#else	// SDRAM_ACCESS
			return false;
#endif	// SDRAM_ACCESS
		//
		// End of components with a SIM.LOAD tag, and a
		// non-zero number of addresses (NADDR)
		//
		}

		//
		// Loading the bkram component
		//
		base  = 0x09000000; // in octets
		adrln = 0x00010000;

		if ((addr >= base)&&(addr < base + adrln)) {
			// If the start access is in bkram
			start = (addr > base) ? (addr-base) : 0;
			offset = (start + base) - addr;
			wlen = (len-offset > adrln - start)
				? (adrln - start) : len - offset;
#ifdef	BKRAM_ACCESS
			// FROM bkram.SIM.LOAD
			char	*mem;
			start = start & (-(4));
			wlen = (wlen+(4-1))&(-4);

			// Need to byte swap data to get it into the memory
			//  But ... it's byte swapping at the *WORD* width, not
			//  the 32-bit width we've built the byteswapbuf() for.
			mem = (char *)&m_core->block_ram[start];
			for(unsigned k=0; k<wlen; k++) {
				unsigned	s;
				s = (k&(-4))
					|((4-1-k) & (4-1));
				mem[s] = buf[k];
			}
			// AUTOFPGA::Now clean up anything else
			// Was there more to write than we wrote?
			if (addr + len > base + adrln)
				return load(base + adrln, &buf[offset+wlen], len-wlen);
			return true;
#else	// BKRAM_ACCESS
			return false;
#endif	// BKRAM_ACCESS
		//
		// End of components with a SIM.LOAD tag, and a
		// non-zero number of addresses (NADDR)
		//
		}

		return false;
	}

	//
	// KYSIM.METHODS
	//
	// If your simulation code will need to call any of its own function
	// define this tag by those functions (or other sim code), and
	// it will be pasated here.
	//
#ifdef	SDSPI_ACCESS
	void	setsdcard(const char *fn) {
		m_sdcard.load(fn);
	}
#endif // SDSPI_ACCESS
#ifdef	INCLUDE_ZIPCPU
	// ZipCPU Access functions
	// {{{
	void	loadelf(const char *elfname) {
		// {{{
		ELFSECTION	**secpp, *secp;
		uint32_t	entry;

		elfread(elfname, entry, secpp);

		for(int s=0; secpp[s]->m_len; s++) {
			bool	successful_load;
			secp = secpp[s];

			successful_load = load(secp->m_start,
				secp->m_data, secp->m_len);

			if (!successful_load) {
				printf("Could not load section "
					"from %08x to %08x--no such address\n",
					secp->m_start,
					secp->m_start+secp->m_len);
			}
		} free(secpp);
	}
	// }}}

	void	cpu_dbg_write(const uint32_t addr, const uint32_t data) {
		// {{{
		// printf("CPU-DBG-WRITE(@0x%08x, 0x%08x);\n", addr, data);
		m_core->cpu_sim_cyc   = 1;
		m_core->cpu_sim_stb   = 1;
		m_core->cpu_sim_we    = 1;
		m_core->cpu_sim_addr  = addr >> 2;
		m_core->cpu_sim_data  = data;

		do {
			tick_clk();
		} while(m_core->cpu_sim_stall);

		m_core->cpu_sim_stb = 0;

		while(!m_core->cpu_sim_ack)
			tick_clk();

		m_core->cpu_sim_cyc  = 0;
		m_core->cpu_sim_we   = 0;
		m_core->cpu_sim_addr = 0;
		m_core->cpu_sim_data = 0;

		tick_clk();
	}
	// }}}

	uint32_t cpu_dbg_read(const uint32_t addr) {
		// {{{
		uint32_t	result;

		// printf("CPU-DBG-READ(@0x%08x);\n", addr);
		m_core->cpu_sim_cyc   = 1;
		m_core->cpu_sim_stb   = 1;
		m_core->cpu_sim_we    = 0;
		m_core->cpu_sim_addr  = addr >> 2;
		m_core->cpu_sim_data  = 0;

		do {
			tick_clk();
		} while(m_core->cpu_sim_stall);

		m_core->cpu_sim_stb = 0;

		while(!m_core->cpu_sim_ack)
			tick_clk();

		result = m_core->cpu_sim_idata;

		m_core->cpu_sim_cyc  = 0;
		m_core->cpu_sim_we   = 0;
		m_core->cpu_sim_addr = 0;
		m_core->cpu_sim_data = 0;

		tick_clk();

		return result;
	}
	// }}}

	// }}}
#endif // INCLUDE_ZIPCPU

};
