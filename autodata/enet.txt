################################################################################
##
## Filename: 	enet.txt
## {{{
## Project:	OpenArty, an entirely open SoC based upon the Arty platform
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2024, Gisselquist Technology, LLC
## {{{
## This file is part of the OpenArty project.
##
## The OpenArty project is free software and gateware, licensed under the terms
## of the 3rd version of the GNU General Public License as published by the
## Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
## Be able to support 2^12, or 4096 byte packets
@$LGPKTBUFSZB=12
##
@PREFIX=netb
@$LGBUFSZ=@$(/LGPKTBUFSZB)
@$MEMORY_ADDRESS_WIDTH=@$(LGBUFSZ)
@$NADDR=(1<<@$MEMORY_ADDRESS_WIDTH)/2
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@MAIN.INSERT=
`ifndef	ETHERNET_ACCESS
	// Ethernet packet memory declaration
	//
	// The only time this needs to be defined is when the ethernet module
	// itself isnt defined.  Otherwise, the access is accomplished by the
	// ethernet module

	memdev #(@$(MEMORY_ADDRESS_WIDTH))
		enet_buffers(i_clk,
			@$(SLAVE.PORTLIST));

`else

// These don't need to be defined here, and indeed should not be defined here
// lest their definitions override those of the netb interface defined in the
// enetpackets module
//
//	assign	@$(SLAVE.PREFIX)_ack   = 1'b0;
//	assign	@$(SLAVE.PREFIX)_stall = 1'b0;
//	assign	@$(SLAVE.PREFIX)_data  = @$(netp.SLAVE.PREFIX)_data;

`endif

@REGS.N=2
@REGS.0= 0	R_NET_RXBUF NETRXB
@$TXREG=(1<< @$(MEMORY_ADDRESS_WIDTH))/4
@REGS.1= @$(TXREG) R_NET_TXBUF NETTXB
@BDEF.IONAME=_netb
@BDEF.OSDEF=_BOARD_HAS_ENETB
@BDEF.OSVAL=
static volatile unsigned *const @$(BDEF.IONAME)rx = ((unsigned *)@$[0x%08x](REGBASE));
static volatile unsigned *const @$(BDEF.IONAME)tx = ((unsigned *)(@$[0x%08x](REGBASE) + (@$[0x%04x](NADDR)<<1)));
##
##
##
@PREFIX=netp
@DEVID=ETHERNET
@ACCESS=@$(DEVID)_ACCESS
@$LGBUFSZ=@$(/LGPKTBUFSZB)
@INT.NETRX.WIRE=netrx_int
@INT.NETTX.WIRE=nettx_int
@INT.NETRX.PIC=syspic
@INT.NETTX.PIC=syspic
@NADDR=8
@SLAVE.TYPE=DOUBLE
@SLAVE.BUS=wb
@DEPENDS=ALLCLOCKS_PRESENT
@MAIN.PORTLIST=
		// Ethernet control (packets) lines
		// i_eth_tx_clk and i_eth_rx_clk come from allclocks.txt
		o_eth_rstn, i_eth_col, i_eth_crs, i_eth_rx_dv,
			i_eth_rxd, i_eth_rxerr,
		o_eth_tx_en, o_eth_txd
@MAIN.IODECL=
	// Ethernet control
	output	wire		o_eth_rstn;
	input	wire		i_eth_col, i_eth_crs, i_eth_rx_dv;
	input	wire	[3:0]	i_eth_rxd;
	input	wire		i_eth_rxerr;
	output	wire		o_eth_tx_en;
	output	wire	[3:0]	o_eth_txd;
@MAIN.DEFNS=
	// Verilator lint_off UNUSED
	wire	[31:0]	netp_debug;
	// Verilator lint_on  UNUSED
@MAWB= @$(netb.MEMORY_ADDRESS_WIDTH)
@MAIN.INSERT=
	enetpackets	#(.MEMORY_ADDRESS_WIDTH(@$(MAWB))
`ifdef	ENETRX_SCOPE
		, .RXSCOPE(1)
`else	// ENETRX_SCOPE
		, .RXSCOPE(0)
`endif
	) u_netctrl(i_clk, i_reset,
		@$(netb.SLAVE.PORTLIST),
		@$(SLAVE.PORTLIST),
		o_eth_rstn,
		i_eth_rx_clk, i_eth_col, i_eth_crs, i_eth_rx_dv, i_eth_rxd,
			i_eth_rxerr,
		i_eth_tx_clk, o_eth_tx_en, o_eth_txd,
		netrx_int, nettx_int, netp_debug
	);
@XDC.INSERT=
# Ethernet generated clocks from the chip
create_clock -period 40.000 -name eth_tx_pin -add [get_ports {i_eth_tx_clk}]
create_clock -period 40.000 -name eth_rx_pin -add [get_ports {i_eth_rx_clk}]

# Ethernet clock crossing information
#
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/o_net_reset*}] -to [get_cells -hier -filter {NAME =~ *netctrl/r_rx_clear*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_tx_busy*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_tx_busy*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txpadi/o_v*}]  -to [get_cells -hier -filter {NAME =~ *netctrl/r_tx_busy*}] 12.3;
# set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_*}]        -to [get_cells -hier -filter {NAME =~ *netctrl/r_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tx_len*}]      -to [get_cells -hier -filter {NAME =~ *netctrl/n_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/config_*}]     -to [get_cells -hier -filter {NAME =~ *netctrl/n_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tx_cm*}]       -to [get_cells -hier -filter {NAME =~ *netctrl/r_tx_cm*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/tx_cancel*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_tx_cancel*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/hw_mac*}]      -to [get_cells -hier -filter {NAME =~ *netctrl/txmaci/r_hw*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/hw_mac*}]      -to [get_cells -hier -filter {NAME =~ *netctrl/rxmaci/r_hw*}] 12.3;
# set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_*}]        -to [get_cells -hier -filter {NAME =~ *net_scope/mem*}] 12.3;
# set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txprei/r_*}] -to [get_cells -hier -filter {NAME =~ *net_scope/o_*}] 12.3;
# set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *net_scope/br_holdoff*} -to [get_cells -hier -filter {NAME =~ *net_scope/dr_stopped*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txprei/r_*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txprei/r_*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txmaci/o_*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txpadi/o_*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txcrci/o_v*}]  -to [get_cells -hier -filter {NAME =~ *netctrl/r_tx_busy*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/txpadi/o_v*}]  -to [get_cells -hier -filter {NAME =~ *netctrl/r_tx_busy*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_rx_val*}]    -to [get_cells -hier -filter {NAME =~ *netctrl/r_rx_val*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_rx_busy*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/r_rx_busy*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_rx_len*}]    -to [get_cells -hier -filter {NAME =~ *netctrl/rx_len*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_rx_miss*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/rx_miss_pi*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/p_rx_cle*}]    -to [get_cells -hier -filter {NAME =~ *netctrl/r_rx_clear*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_rx_crce*}]   -to [get_cells -hier -filter {NAME =~ *netctrl/rx_crc_pip*}] 12.3;
set_max_delay -datapath_only -from [get_cells -hier -filter {NAME=~ *netctrl/n_rx_err*}]    -to [get_cells -hier -filter {NAME =~ *netctrl/rx_err_pip*}] 12.3;



@REGS.N=8
@REGS.0= 0 R_NET_RXCMD	RXCMD,NETRX
@REGS.1= 1 R_NET_TXCMD	TXCMD,NETTX
@REGS.2= 2 R_NET_MACHI	MACHI
@REGS.3= 3 R_NET_MACLO	MACLO
@REGS.4= 4 R_NET_RXMISS	NETMISS
@REGS.5= 5 R_NET_RXERR	NETERR
@REGS.6= 6 R_NET_RXCRC	NETCRCERR
@REGS.7= 7 R_NET_TXCOL	NETCOL
@BDEF.DEFN=
// Network packet interface
#define	ENET_TXGO		0x004000
#define	ENET_TXBUSY		0x004000
#define	ENET_NOHWCRC		0x008000
#define	ENET_NOHWMAC		0x010000
#define	ENET_RESET		0x020000
#define	ENET_NOHWIPCHK		0x040000
#define	ENET_TXCMD(LEN)		((LEN)|ENET_TXGO)
#define	ENET_TXCLR		0x038000
#define	ENET_TXCANCEL		0x000000
#define	ENET_RXAVAIL		0x004000
#define	ENET_RXBUSY		0x008000
#define	ENET_RXMISS		0x010000
#define	ENET_RXERR		0x020000
#define	ENET_RXCRC		0x040000	// Set on a CRC error
#define	ENET_RXLEN		rxcmd & 0x0ffff
#define	ENET_RXCLR		0x004000
#define	ENET_RXBROADCAST	0x080000
#define	ENET_RXCLRERR		0x078000
#define	ENET_TXBUFLN(NET)	(1<<(NET.txcmd>>24))
#define	ENET_RXBUFLN(NET)	(1<<(NET.rxcmd>>24))
typedef	struct ENETPACKET_S {
	unsigned	n_rxcmd, n_txcmd;
	unsigned long	n_mac;
	unsigned	n_rxmiss, n_rxerr, n_rxcrc, n_txcol;
} ENETPACKET;

#define	SYSINT_ENETRX	SYSINT(@$(INT.NETRX.syspic.ID))
#define	SYSINT_ENETTX	SYSINT(@$(INT.NETTX.syspic.ID))

@SIM.CLOCK=eth_rx_clk
@SIM.TICK=
		m_core->i_eth_col   = 0;
		m_core->i_eth_rxerr = 0;
		m_core->i_eth_crs   = 0;
		if (!m_core->o_eth_rstn) {
			// Reset logic
			m_core->i_eth_rx_dv= 0;
			m_core->i_eth_rxd  = 0;
		} else {
			m_core->i_eth_rx_dv= m_core->o_eth_tx_en;
			m_core->i_eth_rxd  = m_core->o_eth_txd;
		}

@BDEF.IONAME=io_enet
@BDEF.IOTYPE=ENETPACKET
@BDEF.OSDEF=_BOARD_HAS_ENETP
@BDEF.OSVAL=static volatile ENETPACKET *const _netp = ((ENETPACKET *)@$[0x%08x](REGBASE));
@RTL.MAKE.GROUP=@$(DEVID)
@RTL.MAKE.SUBD=enet
