################################################################################
##
## Filename: 	eqspi.txt
## {{{
## Project:	OpenArty, an entirely open SoC based upon the Arty platform
##
## Purpose:	Describes the old Artix-7 flash device and controller
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2017-2024, Gisselquist Technology, LLC
## {{{
## This file is part of the OpenArty project.
##
## The OpenArty project is free software and gateware, licensed under the terms
## of the 3rd version of the GNU General Public License as published by the
## Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX= flash
@DEVID=FLASH
@$LGFLASHSZ=24
@$NADDR=(1<<(@$LGFLASHSZ-2))
@$NBYTES=(1<<@$LGFLASHSZ)
@NBYTES.FORMAT=0x%08x
@ACCESS= FLASH_ACCESS
@SLAVE.TYPE=MEMORY
@SLAVE.BUS=wb
@INT.FLASH.WIRE=flash_int
@INT.FLASH.PIC=buspic
## Create some constants for our interrupt controller, based upon the interrupt
## assignment
# Clear the flash interrupt
@$ISPIF_CLR=(1<<(@$INT.FLASH.buspic.ID))
# Disable the flash interrupt
@$ISPIF_DIS=(@$ISPIF_CLR)|(@$ISPIF_CLR << 16)
@$ISPIF_EN=(@$ISPIF_DIS|0x800000000)
@TOP.PORTLIST=
		// Top level Quad-SPI I/O ports
		o_qspi_cs_n, o_qspi_sck, io_qspi_dat
@TOP.IODECL=
	// Quad SPI flash
	output	wire		o_qspi_cs_n;
	output	wire		o_qspi_sck;
	inout	wire	[3:0]	io_qspi_dat;
@TOP.DEFNS=
	wire		w_qspi_sck, w_qspi_cs_n;
	wire	[1:0]	qspi_bmod;
	wire	[3:0]	qspi_dat;
@TOP.MAIN=
		// Quad SPI flash
		w_qspi_cs_n, w_qspi_sck, qspi_dat, io_qspi_dat, qspi_bmod
@TOP.INSERT=
	//
	//
	// Wires for setting up the QSPI flash wishbone peripheral
	//
	//
	// QSPI)BMOD, Quad SPI bus mode, Bus modes are:
	//	0?	Normal serial mode, one bit in one bit out
	//	10	Quad SPI mode, going out
	//	11	Quad SPI mode coming from the device (read mode)
	assign io_qspi_dat = (~qspi_bmod[1])?({2'b11,1'bz,qspi_dat[0]})
				:((qspi_bmod[0])?(4'bzzzz):(qspi_dat[3:0]));
	assign	o_qspi_cs_n = w_qspi_cs_n;

	xoddr	xqspi_sck(i_clk, { !w_qspi_sck, 1'b1}, o_qspi_sck);
@MAIN.PORTLIST=
		// The QSPI Flash
		o_qspi_cs_n, o_qspi_sck, o_qspi_dat, i_qspi_dat, o_qspi_mod
@MAIN.IODECL=
	// The QSPI flash
	output	wire		o_qspi_cs_n, o_qspi_sck;
	output	wire	[3:0]	o_qspi_dat;
	input	wire	[3:0]	i_qspi_dat;
	output	wire	[1:0]	o_qspi_mod;
@MAIN.DEFNS=
	// Flash signals used for the scope, if so enabled
	//	ignored otherwise
	wire		flash_trigger;
	wire	[31:0]	flash_debug;
@MAIN.INSERT=
	eqspiflash flashmem(i_clk, i_reset,
			(wb_cyc), (wb_stb)&&(@$(PREFIX)_sel), (wb_stb)&&(flctl_sel),
				wb_we,
			wb_addr[(@$LGFLASHSZ-3):0], wb_data,
			@$(PREFIX)_ack, @$(PREFIX)_stall, @$(PREFIX)_data,
			o_qspi_sck, o_qspi_cs_n, o_qspi_mod,
				o_qspi_dat, i_qspi_dat,
			flash_int,
			flash_trigger, flash_debug);
@MAIN.ALT=
	assign	o_qspi_sck  = 1'b1;
	assign	o_qspi_cs_n = 1'b1;
	assign	o_qspi_mod  = 2'b01;
	assign	o_qspi_dat  = 4'b1111;
	assign	flash_triggerr  = 0;
	assign	flash_debug     = 0;
@MEM.NAME= flash
@MEM.ACCESS = rx
@REGS.N= 1
@REGS.0= 0 R_FLASH FLASH EQSPIFLASH
@REGDEFS.H.DEFNS=
#define	R_ICONTROL	R_PIC
#define	ISPIF_EN	@$[0x%08x](ISPIF_EN)
#define	ISPIF_DIS	@$[0x%08x](ISPIF_DIS)
#define	ISPIF_CLR	@$[0x%08x](ISPIF_CLR)

#define	@$(DEVID)BASE	@$[0x%08x](REGBASE)
#define	@$(DEVID)LEN	@$NBYTES
#define	@$(DEVID)LGLEN	@$LGFLASHSZ
@REGS.0= 0 R_@$(DEVID) FLASH
@BDEF.OSDEF=_BOARD_HAS_FLASH
@BDEF.OSVAL=extern int _flash[1];
@LD.PERM=	rx
@LD.NAME=	flash
@REGDEFS.H.INSERT=
@SIM.INCLUDE+=
#include "eqspiflashsim.h"
@SIM.DEFNS+=
#ifdef	@$(ACCESS)
	EQSPIFLASHSIM	*m_@$(MEM.NAME);
#endif // @$(ACCESS)
@SIM.INIT+=
#ifdef	@$(ACCESS)
		m_@$(MEM.NAME) = new EQSPIFLASHSIM(FLASHLGLEN);
#endif // @$(ACCESS)
@SIM.TICK +=
#ifdef	@$(ACCESS)
			m_core->i_qspi_dat = (*m_@$(MEM.NAME))(m_core->o_qspi_cs_n,
				m_core->o_qspi_sck,
				m_core->o_qspi_dat);
#endif // @$(ACCESS)
@SIM.LOAD +=
			m_@$(MEM.NAME)->load(start, &buf[offset], wlen);
##
##
##
##
##
# Now, the control interface
@PREFIX= flctl
@NADDR= 32
@ACCESS= FLASH_ACCESS
# This cannot be a DOUBLE peripheral type, since our response may take more
# than two clock cycles.
@SLAVE.TYPE=OTHER
@SLAVE.BUS=wb
@MAIN.INSERT=
	// The Flash control interface result comes back together with the
	// flash interface itself.  Hence, we always return zero here.
	assign	flctl_ack   = 1'b0;
	assign	flctl_stall = 1'b0;
	assign	flctl_data  = 0;
@REGS.NOTE= // FLASH erase/program configuration registers
@REGS.N= 14
@REGS.0 = 0 R_QSPI_EREG	QSPIEREG QSPIE
@REGS.1 = 1 R_QSPI_STAT	QSPIS
@REGS.2 = 2 R_QSPI_NVCONF	QSPIINVCF QSPIINV
@REGS.3 = 3 R_QSPI_VCONF	QSPIVCNF  QSPIV
@REGS.4 = 4 R_QSPI_EVCONF	QSPIEVCF  QSPIEV
@REGS.5 = 5 R_QSPI_LOCK		QSPILOCK
@REGS.6 = 6 R_QSPI_FLAG		QSPIFLAG
# @REGS.14= 7 QSPI_ASYNC	QSPIASYNC
@REGS.7 = 8 R_QSPI_ID		QSPIID
@REGS.8 = 9 R_QSPI_IDA		QSPIIDA
@REGS.9 = 10 R_QSPI_IDB		QSPIIDB
@REGS.10= 11 R_QSPI_IDC		QSPIIDC
@REGS.11= 12 R_QSPI_IDD		QSPIIDD
@REGS.12= 15 R_QSPI_OTPWP	QSPIOTPWP
@REGS.13= 16 R_QSPI_OTP		QSPIOTP
@BDEF.DEFN=
@REGDEFS.H.INSERT=
// Flash control constants
#define	ERASEFLAG	0xc00001be
#define	DISABLEWP	0x40000000
#define	ENABLEWP	0x00000000

#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

@BDEF.IONAME=_io_flctl
@BDEF.IOTYPE=unsigned
@BDEF.OSVAL=static volatile @$(BDEF.IOTYPE) * const @$(BDEF.IONAME) = ((@$BDEF.IOTYPE *)(@$[0x%08x](REGBASE)));
@RTL.MAKE.GROUP= EQSPI
@RTL.MAKE.FILES= eqspiflash.v ctrlspi.v readqspi.v writeqspi.v qspibus.v idotpqspi.v lleqspi.v
