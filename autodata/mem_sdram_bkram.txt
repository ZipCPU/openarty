################################################################################
##
## Filename: 	mem_sdram_bkram.txt
## {{{
## Project:	OpenArty, an entirely open SoC based upon the Arty platform
##
## Purpose:	Describes a memory model containing nothing more than SDRAM
##		and block RAM.  This will be used to create a linker script
##	that can be used to link ZipCPU programs.
##
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2019-2024, Gisselquist Technology, LLC
## {{{
## This file is part of the OpenArty project.
##
## The OpenArty project is free software and gateware, licensed under the terms
## of the 3rd version of the GNU General Public License as published by the
## Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=mem_sdram_bkram
@MASTER.TYPE=SCRIPT
@MASTER.BUS=wb
@LD.FILE=sdram.ld
@LD.DEFNS=
/* LD.DEFNS from zipmaster.txt */
_kram  = ORIGIN(bkram); /* No high-speed kernel RAM */
_ram   = ORIGIN(sdram);
_rom   = 0;
_top_of_stack = ORIGIN(bkram) + LENGTH(bkram);

@LD.SCRIPT=
/* LD.SCRIPT from @$(PREFIX).txt */
SECTIONS
{
	.rocode ORIGIN(bkram): ALIGN(4) {
		_boot_address = .;
		*(.start) *(.boot)
	} > bkram
	_kram_start = . ;
	.kernel : ALIGN_WITH_INPUT {
		*(.kernel)
		*(.text.startup)
		_kram_end = . ;
		}> bkram
	_ram_image_start = . ;
	.ramcod : ALIGN_WITH_INPUT {
		*(.text*)
		*(.rodata*) *(.strings)
		*(.data) *(COMMON)
		_ram_image_end = . ;
		}> sdram
	.bss : ALIGN_WITH_INPUT {
		*(.bss)
		_bss_image_end = . ;
		} > sdram
	_top_of_heap = .;
}
#
