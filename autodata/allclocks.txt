################################################################################
##
## Filename: 	allclocks.txt
## {{{
## Project:	OpenArty, an entirely open SoC based upon the Arty platform
##
## Purpose:	
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
## }}}
## Copyright (C) 2018-2024, Gisselquist Technology, LLC
## {{{
## This file is part of the OpenArty project.
##
## The OpenArty project is free software and gateware, licensed under the terms
## of the 3rd version of the GNU General Public License as published by the
## Free Software Foundation.
##
## This project is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
## }}}
## License:	GPL, v3, as defined and found on www.gnu.org,
## {{{
##		http://www.gnu.org/licenses/gpl.html
##
################################################################################
##
## }}}
@PREFIX=allclocks
@ACCESS=ALLCLOCKS_PRESENT
@TOP.PORTLIST=
		// In support of all clocks
		i_reset_btn, o_eth_ref_clk
@TOP.IODECL=
	input	wire	i_reset_btn;
	output	wire	o_eth_ref_clk;
@TOP.DEFNS=
	wire	s_clk, s_reset;
	wire	eth_rx_clk, eth_tx_clk;
@TOP.INSERT=
`ifdef VERILATOR
	assign	s_clk = sys_clk_i;

	assign	eth_tx_clk = i_eth_tx_clk;
	assign	eth_rx_clk = i_eth_rx_clk;

`else
	reg	[7:0]	pre_reset;
	reg		pwr_reset;

	// Since all our stuff is synchronous to the clock that comes out of
	// the memory controller, sys_reset must needs come out of the memory
	// controller.
	//
	// Logic description starts with the PRE-reset, so as to make certain
	// we include the reset button.
	//
	initial	pre_reset = -1;
	always @(posedge sys_clk)
		pre_reset <= ((!i_reset_btn)||(clk_locked))
			? -1 : { pre_reset, 1'b0 };
	//
	// and then continues with the actual reset, now that we've
	// synchronized our reset button wire.  This is an active LOW reset.
	initial	pwr_reset = 1'b1;
	always @(posedge sys_clk)
		pwr_reset <= pre_reset[7];
`ifdef	VERILATOR
	assign	s_reset = pwr_reset;
`endif

	//
	// Of course, this only goes into the memory controller.  The true
	// device reset comes out of that memory controller, synchronized to our
	// memory generator provided clock(s)

	// Build our master clock
	wire	sys_clk, mem_clk_200mhz,
		clk1_unused, clk2_unused, enet_clk, clk4_unused,
		clk5_unused, clk_feedback, clk_locked, mem_clk_200mhz_nobuf,
		mem_clk_nobuf, clk_feedback_bufd;
	PLLE2_BASE #(
		.BANDWIDTH("OPTIMIZED"), // OPTIMIZED, HIGH, LOW
		.CLKFBOUT_PHASE(0.0),   // Phase offset in degrees of CLKFB, (-360-360)
		.CLKIN1_PERIOD(10.0),   // Input clock period in ns resolution
		// CLKOUT0_DIVIDE - CLKOUT5_DIVIDE: divide amount for each CLKOUT(1-128)
		.CLKFBOUT_MULT(8),      // Multiply value for all CLKOUT (2-64)
		.CLKOUT0_DIVIDE(8),     // 100 MHz      (Clock for MIG)
		.CLKOUT1_DIVIDE(4),     // 200 MHz      (MIG Reference clock)
		.CLKOUT2_DIVIDE(16),    //  50 MHz      (Unused)
		.CLKOUT3_DIVIDE(32),    //  25 MHz      (Ethernet reference clk)
		.CLKOUT4_DIVIDE(32),    //  50 MHz      (Unused clock?)
		.CLKOUT5_DIVIDE(24),    //  66 MHz
		// CLKOUT0_DUTY_CYCLE -- Duty cycle for each CLKOUT
		.CLKOUT0_DUTY_CYCLE(0.5),
		.CLKOUT1_DUTY_CYCLE(0.5),
		.CLKOUT2_DUTY_CYCLE(0.5),
		.CLKOUT3_DUTY_CYCLE(0.5),
		.CLKOUT4_DUTY_CYCLE(0.5),
		.CLKOUT5_DUTY_CYCLE(0.5),
		// CLKOUT0_PHASE -- phase offset for each CLKOUT
		.CLKOUT0_PHASE(0.0),
		.CLKOUT1_PHASE(0.0),
		.CLKOUT2_PHASE(0.0),
		.CLKOUT3_PHASE(0.0),
		.CLKOUT4_PHASE(0.0),
		.CLKOUT5_PHASE(0.0),
		.DIVCLK_DIVIDE(1),      // Master division value , (1-56)
		.STARTUP_WAIT("TRUE")   // Delay DONE until PLL Locks, ("TRUE"/"FALSE")
	) genclock(
		// Clock outputs: 1-bit (each) output
		.CLKOUT0(mem_clk_nobuf),
		.CLKOUT1(mem_clk_200mhz_nobuf),
		.CLKOUT2(clk2_unused),
		.CLKOUT3(enet_clk),
		.CLKOUT4(clk4_unused),
		.CLKOUT5(clk5_unused),
		.CLKFBOUT(clk_feedback), // 1-bit output, feedback clock
		.LOCKED(clk_locked),
		.CLKIN1(sys_clk),
		.PWRDWN(1'b0),
		.RST(1'b0),
		.CLKFBIN(clk_feedback_bufd) // 1-bit input, feedback clock
	);

	BUFH	feedback_buffer(.I(clk_feedback),.O(clk_feedback_bufd));
	// BUFG memref_buffer(.I(mem_clk_200mhz_nobuf),.O(mem_clk_200mhz));
	IBUF	sysclk_buf(.I(sys_clk_i), .O(sys_clk));

	BUFG	eth_rx(.I(i_eth_rx_clk), .O(eth_rx_clk));
	BUFG	eth_tx(.I(i_eth_tx_clk), .O(eth_tx_clk));

	assign	o_eth_ref_clk = enet_clk;
`endif
##
@PREFIX=eth_rx_clk_p
@CLOCK.NAME=eth_rx_clk
@CLOCK.WIRE=i_eth_rx_clk
@CLOCK.FREQUENCY=25000000
@TOP.MAIN=
		eth_rx_clk
@MAIN.PORTLIST=
		i_eth_rx_clk
@MAIN.IODECL=
	// With no ethernet included, this clock will be unused
	// Verilator lint_off UNUSED
	input	wire	i_eth_rx_clk;
	// Verilator lint_on  UNUSED
##
@PREFIX=eth_tx_clk_p
@CLOCK.NAME=eth_tx_clk
@CLOCK.WIRE=i_eth_tx_clk
@CLOCK.FREQUENCY=25000000
@TOP.MAIN=
		eth_tx_clk
@MAIN.PORTLIST=
		i_eth_tx_clk
@MAIN.IODECL=
	// With no ethernet included, this clock will be unused
	// Verilator lint_off UNUSED
	input	wire	i_eth_tx_clk;
	// Verilator lint_on  UNUSED
@REGDEFS.H.DEFNS=
#define	ENETCLKFREQHZ @$(CLOCK.FREQUENCY)
##
@PREFIX=sysclk
@CLOCK.NAME=clk
@CLOCK.WIRE=i_clk
@CLOCK.FREQUENCY=82500000
@REGDEFS.H.DEFNS=
#define	CLKFREQHZ @$(CLOCK.FREQUENCY)
@BDEF.DEFN=
#define	CLKFREQHZ @$(CLOCK.FREQUENCY)
##
@PREFIX=crystal_oscillator
@CLOCK.NAME=crystal_clk
@CLOCK.WIRE=no_clk
@CLOCK.TOP=sys_clk_i
@CLOCK.FREQUENCY=100000000
@TOP.MAIN=
		sys_clk_i
@MAIN.PORTLIST=
		no_clk
@MAIN.IODECL=
	// This clock is unused in main, AutoFPGA still wants it though
	// Verilator lint_off UNUSED
	input	wire	no_clk;
	// Verilator lint_on  UNUSED
##
##
