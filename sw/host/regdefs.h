////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
// {{{
// Project:	OpenArty, an entirely open SoC based upon the Arty platform
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	autofpga -d -o . allclocks.txt global.txt icape.txt version.txt buserr.txt pic.txt pwrcount.txt spio.txt clrspio.txt rtcgps.txt rtcdate.txt wbuconsole.txt bkram.txt spansion.txt sdram.txt zipmaster.txt mdio.txt enet.txt gps.txt sdspi.txt mem_full.txt mem_bkram_only.txt mem_sdram_bkram.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
// }}}
// Copyright (C) 2017-2024, Gisselquist Technology, LLC
// {{{
// This file is part of the OpenArty project.
//
// The OpenArty project is free software and gateware, licensed under the
// terms of the 3rd version of the GNU General Public License as published by
// the Free Software Foundation.
//
// This project is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
// }}}
// License:	GPL, v3, as defined and found on www.gnu.org,
// {{{
//		http://www.gnu.org/licenses/gpl.html
//
////////////////////////////////////////////////////////////////////////////////
//
// }}}
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// FLASH erase/program configuration registers
#define	R_FLASHCFG      	0x01000000	// 01000000, wbregs names: FLASHCFG, QSPIC
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP    	0x02000000	// 02000000, wbregs names: GPSSETUP
#define	R_GPSU_FIFO     	0x02000004	// 02000000, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX   	0x02000008	// 02000000, wbregs names: GPSRX
#define	R_GPSU_UARTTX   	0x0200000c	// 02000000, wbregs names: GPSTX
// SD-SPI addresses
#define	R_SDSPI_CTRL    	0x03000000	// 03000000, wbregs names: SDCARD
#define	R_SDSPI_DATA    	0x03000004	// 03000000, wbregs names: SDDATA
#define	R_SDSPI_FIFOA   	0x03000008	// 03000000, wbregs names: SDFIFOA, SDFIF0, SDFIFA
#define	R_SDSPI_FIFOB   	0x0300000c	// 03000000, wbregs names: SDFIFOB, SDFIF1, SDFIFB
// CONSOLE registers
#define	R_CONSOLE_FIFO  	0x04000004	// 04000000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX	0x04000008	// 04000000, wbregs names: RX
#define	R_CONSOLE_UARTTX	0x0400000c	// 04000000, wbregs names: TX
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC       	0x05000000	// 05000000, wbregs names: FPGACRC
#define	R_CFG_FAR       	0x05000004	// 05000000, wbregs names: FPGAFAR
#define	R_CFG_FDRI      	0x05000008	// 05000000, wbregs names: FPGAFDRI
#define	R_CFG_FDRO      	0x0500000c	// 05000000, wbregs names: FPGAFDRO
#define	R_CFG_CMD       	0x05000010	// 05000000, wbregs names: FPGACMD
#define	R_CFG_CTL0      	0x05000014	// 05000000, wbregs names: FPGACTL0
#define	R_CFG_MASK      	0x05000018	// 05000000, wbregs names: FPGAMASK
#define	R_CFG_STAT      	0x0500001c	// 05000000, wbregs names: FPGASTAT
#define	R_CFG_LOUT      	0x05000020	// 05000000, wbregs names: FPGALOUT
#define	R_CFG_COR0      	0x05000024	// 05000000, wbregs names: FPGACOR0
#define	R_CFG_MFWR      	0x05000028	// 05000000, wbregs names: FPGAMFWR
#define	R_CFG_CBC       	0x0500002c	// 05000000, wbregs names: FPGACBC
#define	R_CFG_IDCODE    	0x05000030	// 05000000, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS      	0x05000034	// 05000000, wbregs names: FPGAAXSS
#define	R_CFG_COR1      	0x05000038	// 05000000, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR    	0x05000040	// 05000000, wbregs names: WBSTAR
#define	R_CFG_TIMER     	0x05000044	// 05000000, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS   	0x05000058	// 05000000, wbregs names: BOOTSTS
#define	R_CFG_CTL1      	0x05000060	// 05000000, wbregs names: FPGACTL1
#define	R_CFG_BSPI      	0x0500007c	// 05000000, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR     	0x06000000	// 06000000, wbregs names: BMCR
#define	R_MDIO_BMSR     	0x06000004	// 06000000, wbregs names: BMSR
#define	R_MDIO_PHYIDR1  	0x06000008	// 06000000, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2  	0x0600000c	// 06000000, wbregs names: PHYIDR2
#define	R_MDIO_ANAR     	0x06000010	// 06000000, wbregs names: ANAR
#define	R_MDIO_ANLPAR   	0x06000014	// 06000000, wbregs names: ANLPAR
#define	R_MDIO_ANER     	0x06000018	// 06000000, wbregs names: ANER
#define	R_MDIO_ANNPTR   	0x0600001c	// 06000000, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS   	0x06000040	// 06000000, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR    	0x06000050	// 06000000, wbregs names: FCSCR
#define	R_MDIO_RECR     	0x06000054	// 06000000, wbregs names: RECR
#define	R_MDIO_PCSR     	0x06000058	// 06000000, wbregs names: PCSR
#define	R_MDIO_RBR      	0x0600005c	// 06000000, wbregs names: RBR
#define	R_MDIO_LEDCR    	0x06000060	// 06000000, wbregs names: LEDCR
#define	R_MDIO_PHYCR    	0x06000064	// 06000000, wbregs names: PHYCR
#define	R_MDIO_BTSCR    	0x06000068	// 06000000, wbregs names: BTSCR
#define	R_MDIO_CDCTRL   	0x0600006c	// 06000000, wbregs names: CDCTRL
#define	R_MDIO_EDCR     	0x06000074	// 06000000, wbregs names: EDCR
#define	R_CLRLED        	0x07000000	// 07000000, wbregs names: CLRLED
#define	R_CLRLED0       	0x07000000	// 07000000, wbregs names: CLRLED0, CLR0
#define	R_CLRLED1       	0x07000004	// 07000000, wbregs names: CLRLED1, CLR1
#define	R_CLRLED2       	0x07000008	// 07000000, wbregs names: CLRLED2, CLR2
#define	R_CLRLED3       	0x0700000c	// 07000000, wbregs names: CLRLED3, CLR3
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA     	0x07000020	// 07000020, wbregs names: ALPHA
#define	R_GPS_BETA      	0x07000024	// 07000020, wbregs names: BETA
#define	R_GPS_GAMMA     	0x07000028	// 07000020, wbregs names: GAMMA
#define	R_GPS_STEP      	0x0700002c	// 07000020, wbregs names: STEP
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ    	0x07000040	// 07000040, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP    	0x07000044	// 07000040, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI   	0x07000048	// 07000040, wbregs names: ERRHI
#define	R_GPSTB_ERRLO   	0x0700004c	// 07000040, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI 	0x07000050	// 07000040, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO 	0x07000054	// 07000040, wbregs names: CNTLO
#define	R_GPSTB_STEPHI  	0x07000058	// 07000040, wbregs names: STEPHI
#define	R_GPSTB_STEPLO  	0x0700005c	// 07000040, wbregs names: STEPLO
#define	R_NET_RXCMD     	0x07000060	// 07000060, wbregs names: RXCMD, NETRX
#define	R_NET_TXCMD     	0x07000064	// 07000060, wbregs names: TXCMD, NETTX
#define	R_NET_MACHI     	0x07000068	// 07000060, wbregs names: MACHI
#define	R_NET_MACLO     	0x0700006c	// 07000060, wbregs names: MACLO
#define	R_NET_RXMISS    	0x07000070	// 07000060, wbregs names: NETMISS
#define	R_NET_RXERR     	0x07000074	// 07000060, wbregs names: NETERR
#define	R_NET_RXCRC     	0x07000078	// 07000060, wbregs names: NETCRCERR
#define	R_NET_TXCOL     	0x0700007c	// 07000060, wbregs names: NETCOL
// RTC clock registers
#define	R_CLOCK         	0x07000080	// 07000080, wbregs names: CLOCK
#define	R_TIMER         	0x07000084	// 07000080, wbregs names: TIMER
#define	R_STOPWATCH     	0x07000088	// 07000080, wbregs names: STOPWATCH
#define	R_CKALARM       	0x0700008c	// 07000080, wbregs names: ALARM, CKALARM
#define	R_BUILDTIME     	0x070000a0	// 070000a0, wbregs names: BUILDTIME
#define	R_BUSERR        	0x070000a4	// 070000a4, wbregs names: BUSERR
#define	R_PIC           	0x070000a8	// 070000a8, wbregs names: PIC
#define	R_PWRCOUNT      	0x070000ac	// 070000ac, wbregs names: PWRCOUNT
#define	R_RTCDATE       	0x070000b0	// 070000b0, wbregs names: RTCDATE, DATE
#define	R_SPIO          	0x070000b4	// 070000b4, wbregs names: SPIO
// A register capturing subseconds, locked to GPS if present
#define	R_SUBSECONDS    	0x070000b8	// 070000b8, wbregs names: SUBSECONDS
#define	R_VERSION       	0x070000bc	// 070000bc, wbregs names: VERSION
#define	R_NET_RXBUF     	0x08000000	// 08000000, wbregs names: NETRXB
#define	R_NET_TXBUF     	0x08001000	// 08000000, wbregs names: NETTXB
#define	R_BKRAM         	0x09000000	// 09000000, wbregs names: RAM
#define	R_FLASH         	0x0a000000	// 0a000000, wbregs names: FLASH
#define	R_SDRAM         	0x10000000	// 10000000, wbregs names: SDRAM
// ZipCPU control/debug registers
#define	R_ZIPCTRL       	0x20000000	// 20000000, wbregs names: CPU, ZIPCTRL
#define	R_ZIPREGS       	0x20000080	// 20000000, wbregs names: ZIPREGS
#define	R_ZIPS0         	0x20000080	// 20000000, wbregs names: SR0
#define	R_ZIPS1         	0x20000084	// 20000000, wbregs names: SR1
#define	R_ZIPS2         	0x20000088	// 20000000, wbregs names: SR2
#define	R_ZIPS3         	0x2000008c	// 20000000, wbregs names: SR3
#define	R_ZIPS4         	0x20000090	// 20000000, wbregs names: SR4
#define	R_ZIPS5         	0x20000094	// 20000000, wbregs names: SR5
#define	R_ZIPS6         	0x20000098	// 20000000, wbregs names: SR6
#define	R_ZIPS7         	0x2000009c	// 20000000, wbregs names: SR7
#define	R_ZIPS8         	0x200000a0	// 20000000, wbregs names: SR8
#define	R_ZIPS9         	0x200000a4	// 20000000, wbregs names: SR9
#define	R_ZIPS10        	0x200000a8	// 20000000, wbregs names: SR10
#define	R_ZIPS11        	0x200000ac	// 20000000, wbregs names: SR11
#define	R_ZIPS12        	0x200000b0	// 20000000, wbregs names: SR12
#define	R_ZIPSSP        	0x200000b4	// 20000000, wbregs names: SSP, SR13
#define	R_ZIPCC         	0x200000b8	// 20000000, wbregs names: ZIPCC, CC, SCC, SR14
#define	R_ZIPPC         	0x200000bc	// 20000000, wbregs names: ZIPPC, PC, SPC, SR15
#define	R_ZIPUSER       	0x200000c0	// 20000000, wbregs names: ZIPUSER
#define	R_ZIPU0         	0x200000c0	// 20000000, wbregs names: UR0
#define	R_ZIPU1         	0x200000c4	// 20000000, wbregs names: UR1
#define	R_ZIPU2         	0x200000c8	// 20000000, wbregs names: UR2
#define	R_ZIPU3         	0x200000cc	// 20000000, wbregs names: UR3
#define	R_ZIPU4         	0x200000d0	// 20000000, wbregs names: UR4
#define	R_ZIPU5         	0x200000d4	// 20000000, wbregs names: UR5
#define	R_ZIPU6         	0x200000d8	// 20000000, wbregs names: UR6
#define	R_ZIPU7         	0x200000dc	// 20000000, wbregs names: UR7
#define	R_ZIPU8         	0x200000e0	// 20000000, wbregs names: UR8
#define	R_ZIPU9         	0x200000e4	// 20000000, wbregs names: UR9
#define	R_ZIPU10        	0x200000e8	// 20000000, wbregs names: UR10
#define	R_ZIPU11        	0x200000ec	// 20000000, wbregs names: UR11
#define	R_ZIPU12        	0x200000f0	// 20000000, wbregs names: UR12, UFP
#define	R_ZIPUSP        	0x200000f4	// 20000000, wbregs names: USP, UR13
#define	R_ZIPUCC        	0x200000f8	// 20000000, wbregs names: ZIPUCC, UCC
#define	R_ZIPUPC        	0x200000fc	// 20000000, wbregs names: ZIPUPC, UPC
#define	R_ZIPSYSTEM     	0x20000100	// 20000000, wbregs names: ZIPSYSTEM, ZIPSYS
#define	R_ZIPPIC        	0x20000100	// 20000000, wbregs names: ZIPPIC
#define	R_ZIPWDOG       	0x20000104	// 20000000, wbregs names: ZIPWDOG
#define	R_ZIPBDOG       	0x20000108	// 20000000, wbregs names: ZIPBDOG
#define	R_ZIPAPIC       	0x2000010c	// 20000000, wbregs names: ZIPAPIC
#define	R_ZIPTIMA       	0x20000110	// 20000000, wbregs names: ZIPTIMA
#define	R_ZIPTIMB       	0x20000114	// 20000000, wbregs names: ZIPTIMB
#define	R_ZIPTIMC       	0x20000118	// 20000000, wbregs names: ZIPTIMC
#define	R_ZIPJIFF       	0x2000011c	// 20000000, wbregs names: ZIPJIFF
#define	R_ZIPMTASK      	0x20000120	// 20000000, wbregs names: ZIPMTASK
#define	R_ZIPMMSTL      	0x20000124	// 20000000, wbregs names: ZIPMMSTL
#define	R_ZIPMPSTL      	0x20000128	// 20000000, wbregs names: ZIPMPSTL
#define	R_ZIPMINSN      	0x2000012c	// 20000000, wbregs names: ZIPMINSN
#define	R_ZIPUTASK      	0x20000130	// 20000000, wbregs names: ZIPUTASK
#define	R_ZIPUMSTL      	0x20000134	// 20000000, wbregs names: ZIPUMSTL
#define	R_ZIPUPSTL      	0x20000138	// 20000000, wbregs names: ZIPUPSTL
#define	R_ZIPUINSN      	0x2000013c	// 20000000, wbregs names: ZIPUINSN
#define	R_ZIPDMAC       	0x20000140	// 20000000, wbregs names: ZIPDMAC


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	ENETCLKFREQHZ 25000000
#define	CLKFREQHZ 82500000
#define	BAUDRATE	1000000
// @REGDEFS.H.DEFNS for peripherals
#define	FLASHBASE	0x0a000000
#define	FLASHLEN	0x01000000
#define	FLASHLGLEN	24
//
#define	FLASH_RDDELAY	3
#define	FLASH_NDUMMY	6
//
#define	SDRAMBASE	0x10000000
#define	SDRAMLEN	0x10000000
#define	BKRAMBASE	0x09000000
#define	BKRAMLEN	0x00010000
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters
// @REGDEFS.H.INSERT for peripherals
////////////////////////////////////////////////////////////////////////////////
//
// ZipCPU register definitions
// {{{

#define	CPU_GO		0x0000
#define	CPU_HALT	0x0001
#define	CPU_STALL	0x0002
#define	CPU_STEP	0x0004
#define	CPU_RESET	0x0008
#define	CPU_CLRCACHE	0x0010
// (Reserved)		0x00e0
#define	CPU_SLEEPING	0x0100
#define	CPU_GIE		0x0200
#define	CPU_INT		0x0400
#define	CPU_BREAK	0x0800
#define	CPU_EXINT	0xfffff000
//
#define	CPU_sR0		0x0020
#define	CPU_sSP		0x002d
#define	CPU_sCC		0x002e
#define	CPU_sPC		0x002f
#define	CPU_uR0		0x0030
#define	CPU_uSP		0x003d
#define	CPU_uCC		0x003e
#define	CPU_uPC		0x003f

#ifdef	BKROM_ACCESS
#define	RESET_ADDRESS	@$[0x%08x](bkrom.REGBASE)
#else
#ifdef	FLASH_ACCESS
#define	RESET_ADDRESS	0x0ae00000
#else
#define	RESET_ADDRESS	0x09000000
#endif	// FLASH_ACCESS
#endif	// BKROM_ACCESS
// }}}
// Flash control constants
#define	QSPI_FLASH	// This core and hardware support a Quad SPI flash
#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))

// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
